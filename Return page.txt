public class BillingController : Controller
{
    private readonly IHttpClientFactory _httpClientFactory;

    public BillingController(IHttpClientFactory httpClientFactory)
    {
        _httpClientFactory = httpClientFactory;
    }

    // Other actions...

    public IActionResult ReturnOrder()
    {
        return View();
    }

    [HttpGet]
    public async Task<IActionResult> GetOrderItems(int orderId)
    {
        var client = _httpClientFactory.CreateClient();
        var response = await client.GetAsync($"https://yourapiurl/api/salesitems/order/{orderId}");

        if (!response.IsSuccessStatusCode)
        {
            return Json(new { success = false, message = "Order not found" });
        }

        var data = await response.Content.ReadAsStringAsync();
        var orderItems = JsonConvert.DeserializeObject<List<SalesItem>>(data);

        return Json(new { success = true, orderItems });
    }

    [HttpPost]
    public async Task<IActionResult> ReturnItems([FromBody] List<ReturnItemViewModel> returnItems)
    {
        if (returnItems == null || !returnItems.Any())
        {
            return BadRequest("No items to return");
        }

        var client = _httpClientFactory.CreateClient();
        var content = new StringContent(JsonConvert.SerializeObject(returnItems), System.Text.Encoding.UTF8, "application/json");

        var response = await client.PostAsync("https://yourapiurl/api/returns", content);

        if (!response.IsSuccessStatusCode)
        {
            return StatusCode((int)response.StatusCode, "Error processing returns");
        }

        return Ok("Items returned successfully");
    }
}







@{
    ViewData["Title"] = "Return Order";
}

<h2>Return Order</h2>

<div class="mb-3">
    <label for="orderIdInput" class="form-label">Order ID</label>
    <input type="text" id="orderIdInput" class="form-control" placeholder="Enter Order ID">
    <button id="fetchOrderItems" class="btn btn-primary mt-2">Fetch Order Items</button>
</div>

<div id="orderItemsSection" style="display:none;">
    <h3>Order Items</h3>
    <table class="table table-striped" id="orderItemsTable">
        <thead>
            <tr>
                <th>Product</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Qty to Return</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    <button id="returnItems" class="btn btn-success">Return Items</button>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#fetchOrderItems').click(function () {
                var orderId = $('#orderIdInput').val();
                $.getJSON('/Billing/GetOrderItems?orderId=' + orderId, function (data) {
                    if (data.success) {
                        var tbody = $('#orderItemsTable tbody');
                        tbody.empty();
                        $.each(data.orderItems, function (index, item) {
                            var row = '<tr data-sales-item-id="' + item.salesItemId + '" data-product-id="' + item.productId + '">' +
                                      '<td>' + item.product.productName + '</td>' +
                                      '<td>' + item.pricePerItem + '</td>' +
                                      '<td>' + item.qty + '</td>' +
                                      '<td><input type="number" class="form-control qty-to-return" min="0" max="' + item.qty + '" value="0"></td>' +
                                      '<td><button type="button" class="btn btn-warning btn-sm return-item">Return</button></td>' +
                                      '</tr>';
                            tbody.append(row);
                        });
                        $('#orderItemsSection').show();
                    } else {
                        alert(data.message);
                    }
                });
            });

            $(document).on('click', '.return-item', function () {
                var row = $(this).closest('tr');
                var qtyToReturn = row.find('.qty-to-return').val();
                if (qtyToReturn > 0) {
                    if (confirm('Are you sure you want to return ' + qtyToReturn + ' items?')) {
                        var returnItem = {
                            SalesItemId: row.data('sales-item-id'),
                            ProductId: row.data('product-id'),
                            QtyToReturn: qtyToReturn
                        };

                        $.ajax({
                            url: '/Billing/ReturnItems',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify([returnItem]),
                            success: function () {
                                alert('Items returned successfully');
                                $('#fetchOrderItems').click(); // Refresh the order items
                            },
                            error: function () {
                                alert('Error processing returns');
                            }
                        });
                    }
                } else {
                    alert('Please enter a valid quantity to return');
                }
            });

            $('#returnItems').click(function () {
                var returnItems = [];
                $('#orderItemsTable tbody tr').each(function () {
                    var row = $(this);
                    var qtyToReturn = row.find('.qty-to-return').val();
                    if (qtyToReturn > 0) {
                        var returnItem = {
                            SalesItemId: row.data('sales-item-id'),
                            ProductId: row.data('product-id'),
                            QtyToReturn: qtyToReturn
                        };
                        returnItems.push(returnItem);
                    }
                });

                if (returnItems.length > 0) {
                    if (confirm('Are you sure you want to return the selected items?')) {
                        $.ajax({
                            url: '/Billing/ReturnItems',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(returnItems),
                            success: function () {
                                alert('Items returned successfully');
                                $('#fetchOrderItems').click(); // Refresh the order items
                            },
                            error: function () {
                                alert('Error processing returns');
                            }
                        });
                    }
                } else {
                    alert('Please enter a valid quantity to return');
                }
            });
        });
    </script>
}




@{
    ViewData["Title"] = "Return Order";
}

<h2>Return Order</h2>

<div class="mb-3">
    <label for="orderIdInput" class="form-label">Order ID</label>
    <input type="text" id="orderIdInput" class="form-control" placeholder="Enter Order ID">
    <button id="fetchOrderItems" class="btn btn-primary mt-2">Fetch Order Items</button>
</div>

<div id="orderItemsSection" style="display:none;">
    <h3>Order Items</h3>
    <table class="table table-striped" id="orderItemsTable">
        <thead>
            <tr>
                <th>Product</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Qty to Return</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    <button id="returnItems" class="btn btn-success">Return Items</button>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#fetchOrderItems').click(function () {
                var orderId = $('#orderIdInput').val();
                $.getJSON('/Billing/GetOrderItems?orderId=' + orderId, function (data) {
                    if (data.success) {
                        var tbody = $('#orderItemsTable tbody');
                        tbody.empty();
                        $.each(data.orderItems, function (index, item) {
                            var row = '<tr data-sales-item-id="' + item.salesItemId + '" data-product-id="' + item.productId + '">' +
                                      '<td>' + item.product.productName + '</td>' +
                                      '<td>' + item.pricePerItem + '</td>' +
                                      '<td>' + item.qty + '</td>' +
                                      '<td><input type="number" class="form-control qty-to-return" min="0" max="' + item.qty + '" value="0"></td>' +
                                      '<td><button type="button" class="btn btn-warning btn-sm return-item">Return</button></td>' +
                                      '</tr>';
                            tbody.append(row);
                        });
                        $('#orderItemsSection').show();
                    } else {
                        alert(data.message);
                    }
                });
            });

            $(document).on('click', '.return-item', function () {
                var row = $(this).closest('tr');
                var qtyToReturn = row.find('.qty-to-return').val();
                if (qtyToReturn > 0) {
                    if (confirm('Are you sure you want to return ' + qtyToReturn + ' items?')) {
                        var returnItem = {
                            SalesItemId: row.data('sales-item-id'),
                            ProductId: row.data('product-id'),
                            QtyToReturn: qtyToReturn
                        };

                        $.ajax({
                            url: '/Billing/ReturnItems',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify([returnItem]),
                            success: function () {
                                alert('Items returned successfully');
                                $('#fetchOrderItems').click(); // Refresh the order items
                            },
                            error: function () {
                                alert('Error processing returns');
                            }
                        });
                    }
                } else {
                    alert('Please enter a valid quantity to return');
                }
            });

            $('#returnItems').click(function () {
                var returnItems = [];
                $('#orderItemsTable tbody tr').each(function () {
                    var row = $(this);
                    var qtyToReturn = row.find('.qty-to-return').val();
                    if (qtyToReturn > 0) {
                        var returnItem = {
                            SalesItemId: row.data('sales-item-id'),
                            ProductId: row.data('product-id'),
                            QtyToReturn: qtyToReturn
                        };
                        returnItems.push(returnItem);
                    }
                });

                if (returnItems.length > 0) {
                    if (confirm('Are you sure you want to return the selected items?')) {
                        $.ajax({
                            url: '/Billing/ReturnItems',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(returnItems),
                            success: function () {
                                alert('Items returned successfully');
                                $('#fetchOrderItems').click(); // Refresh the order items
                            },
                            error: function () {
                                alert('Error processing returns');
                            }
                        });
                    }
                } else {
                    alert('Please enter a valid quantity to return');
                }
            });
        });
    </script>
}



[HttpGet("order/{orderId}")]
public async Task<ActionResult<IEnumerable<SalesItem>>> GetOrderItems(int orderId)
{
    var orderItems = await _context.SalesItems
                                   .Where(si => si.OrderId == orderId)
                                   .Include(si => si.Product)
                                   .ToListAsync();

    if (orderItems == null)
    {
        return NotFound("Order not found");
    }

    return Ok(orderItems);
}




[HttpPost("returns")]
public async Task<IActionResult> ProcessReturns([FromBody] List<ReturnItemViewModel> returnItems)
{
    foreach (var returnItem in returnItems)
    {
        var salesItem = await _context.SalesItems.FindAsync(returnItem.SalesItemId);
        if (salesItem != null)
        {
            // Adjust inventory and process return
            var product = await _context.Products.FindAsync(returnItem.ProductId);
            if (product != null)
            {
                product.Quantity += returnItem.QtyToReturn;
            }
            salesItem.Qty -= returnItem.QtyToReturn;

            if (salesItem.Qty == 0)
            {
                _context.SalesItems.Remove(salesItem);
            }
            else
            {
                _context.SalesItems.Update(salesItem);
            }
        }
    }

    await _context.SaveChangesAsync();

    return Ok();
}




System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. 
