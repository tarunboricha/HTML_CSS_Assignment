using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace YourNamespace.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ProductInventoryController : ControllerBase
    {
        private readonly YourDbContext _context;

        public ProductInventoryController(YourDbContext context)
        {
            _context = context;
        }

        // GET: api/ProductInventory
        [HttpGet]
        public async Task<ActionResult<IEnumerable<ProductInventory>>> GetProductInventoryDetails()
        {
            return await _context.ProductInventories
                                 .Include(pi => pi.Product)
                                 .Include(pi => pi.Sup)
                                 .ToListAsync();
        }

        // GET: api/ProductInventory/SupId/ProductId
        [HttpGet("{SupId}/{ProductId}")]
        public async Task<ActionResult<ProductInventory>> GetCurrentProductInventoryDetail(int SupId, int ProductId)
        {
            var productInventory = await _context.ProductInventories
                                                 .Include(pi => pi.Product)
                                                 .Include(pi => pi.Sup)
                                                 .FirstOrDefaultAsync(pi => pi.SupId == SupId && pi.ProductId == ProductId);

            if (productInventory == null)
            {
                return NotFound();
            }

            return productInventory;
        }

        // PUT: api/ProductInventory/SupId/ProductId
        [HttpPut("{SupId}/{ProductId}")]
        public async Task<IActionResult> PutProductInventory(int SupId, int ProductId, ProductInventory productInventory)
        {
            if (SupId != productInventory.SupId || ProductId != productInventory.ProductId)
            {
                return BadRequest();
            }

            _context.Entry(productInventory).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ProductInventoryExists(SupId, ProductId))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/ProductInventory
        [HttpPost]
        public async Task<ActionResult<ProductInventory>> PostProductInventoryDetail(ProductInventory productInventory)
        {
            if (ProductInventoryExists(productInventory.SupId, productInventory.ProductId))
            {
                return BadRequest("ProductInventory with this SupId and ProductId already exists.");
            }

            _context.ProductInventories.Add(productInventory);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetCurrentProductInventoryDetail", new { SupId = productInventory.SupId, ProductId = productInventory.ProductId }, productInventory);
        }

        private bool ProductInventoryExists(int SupId, int ProductId)
        {
            return _context.ProductInventories.Any(e => e.SupId == SupId && e.ProductId == ProductId);
        }
    }
}

-----------------------------------------------------------------------------------------------------------------
@model IEnumerable<SportsStoreManagementSystem.Entities.ProductInventory>

@{
    ViewData["Title"] = "Index";
}

<h1>Product Inventory</h1>

@* <p>
    <a asp-action="Create">Create New</a>
</p> *@
<table class="table table-striped">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.SupId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ProductId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Stocks)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.SupId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ProductId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Stocks)
            </td>
            <td>
                    @Html.ActionLink("Return", "Edit", new { id = item.SupId, id2 = item.ProductId })
                @* @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ }) *@
            </td>
        </tr>
}
    </tbody>
</table>


==========================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace SportsStoreManagementSystem.Entities
{
    public partial class ProductInventory
    {
        public int SupId { get; set; }

        public int ProductId { get; set; }

        public int Stocks { get; set; }

        public virtual Product? Product { get; set; } = null!;

        public virtual SupplierDetail? Sup { get; set; } = null!;
    }
}


==========================================================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace SportsStoreManagementSystem.Entities
{
    public partial class Product
    {
        public int CategoryId { get; set; }

        public int ProductId { get; set; }

        public string? ProductName { get; set; }

        public int Price { get; set; }

        [JsonIgnore]
        public virtual ProductCategory? Category { get; set; }

        [JsonIgnore]
        public virtual ICollection<ProcurementDetail> ProcurementDetails { get; set; } = new List<ProcurementDetail>();

        [JsonIgnore]
        public virtual ICollection<ProductInventory> ProductInventories { get; set; } = new List<ProductInventory>();

        [JsonIgnore]
        public virtual ICollection<SalesItem> SalesItems { get; set; } = new List<SalesItem>();
    }
}

===================================================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace SportsStoreManagementSystem.Entities
{
    public partial class SupplierDetail
    {
        public int SupId { get; set; }

        public string? SubName { get; set; }

        public string? SubAddress { get; set; }

        public string? SubContact { get; set; }

        public virtual ICollection<ProcurementDetail> ProcurementDetails { get; set; } = new List<ProcurementDetail>();

        [JsonIgnore]
        public virtual ICollection<ProductInventory> ProductInventories { get; set; } = new List<ProductInventory>();

        public virtual ICollection<SalesItem> SalesItems { get; set; } = new List<SalesItem>();
    }
}

=======================================================================================================================
