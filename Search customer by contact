using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

[Route("api/[controller]")]
[ApiController]
public class CustomerDetailsController : ControllerBase
{
    private readonly SupplierDbContext _context;

    public CustomerDetailsController(SupplierDbContext context)
    {
        _context = context;
    }

    // GET: api/CustomerDetails
    [HttpGet]
    public async Task<ActionResult<IEnumerable<CustomerDetail>>> GetCustomerDetails()
    {
        return await _context.CustomerDetails.ToListAsync();
    }

    // GET: api/CustomerDetails/5
    [HttpGet("{id}")]
    public async Task<ActionResult<CustomerDetail>> GetCustomerDetail(int id)
    {
        var customerDetail = await _context.CustomerDetails.FindAsync(id);

        if (customerDetail == null)
        {
            return NotFound();
        }

        return customerDetail;
    }

    // GET: api/CustomerDetails/contact/{contact}
    [HttpGet("contact/{contact}")]
    public async Task<ActionResult<CustomerDetail>> GetCustomerByContact(string contact)
    {
        var customerDetail = await _context.CustomerDetails
                                           .FirstOrDefaultAsync(c => c.CustomerContact == contact);

        if (customerDetail == null)
        {
            return NotFound();
        }

        return customerDetail;
    }

    // POST: api/CustomerDetails
    [HttpPost]
    public async Task<ActionResult<CustomerDetail>> PostCustomerDetail(CustomerDetail customerDetail)
    {
        _context.CustomerDetails.Add(customerDetail);
        await _context.SaveChangesAsync();

        return CreatedAtAction("GetCustomerDetail", new { id = customerDetail.CustomerId }, customerDetail);
    }

    // PUT: api/CustomerDetails/5
    [HttpPut("{id}")]
    public async Task<IActionResult> PutCustomerDetail(int id, CustomerDetail customerDetail)
    {
        if (id != customerDetail.CustomerId)
        {
            return BadRequest();
        }

        _context.Entry(customerDetail).State = EntityState.Modified;

        try
        {
            await _context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CustomerDetailExists(id))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
        }

        return NoContent();
    }




using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

[Route("api/[controller]")]
[ApiController]
public class ProductsController : ControllerBase
{
    private readonly SupplierDbContext _context;

    public ProductsController(SupplierDbContext context)
    {
        _context = context;
    }

    // GET: api/Products/bySupplier/{supplierId}
    [HttpGet("bySupplier/{supplierId}")]
    public async Task<ActionResult<IEnumerable<Product>>> GetProductsBySupplier(int supplierId)
    {
        var products = await _context.Products
            .Include(p => p.ProductInventories)
            .Include(p => p.ProcurementDetails)
            .Where(p => p.ProcurementDetails.Any(pd => pd.SupplierId == supplierId) && p.ProductInventories.Any(pi => pi.Quantity > 0))
            .ToListAsync();

        if (!products.Any())
        {
            return NotFound();
        }

        return products;
    }
}


    private bool CustomerDetailExists(int id)
    {
        return _context.CustomerDetails.Any(e => e.CustomerId == id);
    }
}
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

[Route("api/[controller]")]
[ApiController]
public class SupplierDetailsController : ControllerBase
{
    private readonly SupplierDbContext _context;

    public SupplierDetailsController(SupplierDbContext context)
    {
        _context = context;
    }

    // GET: api/SupplierDetails/byProduct/{productId}
    [HttpGet("byProduct/{productId}")]
    public async Task<ActionResult<IEnumerable<SupplierDetail>>> GetSupplierDetailsByProductId(int productId)
    {
        var suppliers = await _context.SupplierDetails
            .Include(s => s.ProcurementDetails)
            .ThenInclude(pd => pd.Product)
            .Where(s => s.ProcurementDetails.Any(pd => pd.ProductId == productId))
            .ToListAsync();

        if (!suppliers.Any())
        {
            return NotFound();
        }

        return suppliers;
    }

    // Other actions like GET, POST, PUT for SupplierDetails...
}
