public partial class CustomerDetail
{
    public int CustomerId { get; set; }

    public string CustomerName { get; set; } = null!;

    public string CustomerContact { get; set; } = null!;

    public virtual ICollection<SalesHistory> SalesHistories { get; set; } = new List<SalesHistory>();

    public virtual ICollection<SalesItem> SalesItems { get; set; } = new List<SalesItem>();
}


public partial class Product
{
    public int? CategoryId { get; set; }

    public int ProductId { get; set; }

    public string ProductName { get; set; } = null!;

    public int? Price { get; set; }

    public virtual ProductCategory? Category { get; set; }

    public virtual ICollection<ProcurementDetail> ProcurementDetails { get; set; } = new List<ProcurementDetail>();

    public virtual ICollection<ProductInventory> ProductInventories { get; set; } = new List<ProductInventory>();

    public virtual ICollection<SalesItem> SalesItems { get; set; } = new List<SalesItem>();
}


public partial class ProductCategory
{
    public int CategoryId { get; set; }

    public string CategoryName { get; set; } = null!;

    public virtual ICollection<Product> Products { get; set; } = new List<Product>();
}

public partial class SalesItem
{
    public int SalesId { get; set; }

    public int CustomerId { get; set; }

    public int? SupId { get; set; }

    public int ProductId { get; set; }

    public int Qty { get; set; }

    public int PricePerItem { get; set; }

    public virtual CustomerDetail? Customer { get; set; }

    public virtual Product? Product { get; set; }

    public virtual SupplierDetail? Sup { get; set; }
}

public partial class SupplierDetail
{
    public int SupId { get; set; }

    public string SubName { get; set; } = null!;

    public string SubAddress { get; set; } = null!;

    public string SubContact { get; set; } = null!;

    public virtual ICollection<ProcurementDetail> ProcurementDetails { get; set; } = new List<ProcurementDetail>();

    public virtual ICollection<ProductInventory> ProductInventories { get; set; } = new List<ProductInventory>();

    public virtual ICollection<SalesItem> SalesItems { get; set; } = new List<SalesItem>();
}



public partial class ProductInventory
{
    public int SupId { get; set; }

    public int ProductId { get; set; }

    public int Stocks { get; set; }

    public virtual Product Product { get; set; } = null!;

    public virtual SupplierDetail Sup { get; set; } = null!;
}


public partial class ProcurementDetail
{
    public int ProcurementId { get; set; }

    public int? SupId { get; set; }

    public int? ProductId { get; set; }

    public int Qty { get; set; }

    public int TotalPrice { get; set; }

    public virtual Product? Product { get; set; }

    public virtual SupplierDetail? Sup { get; set; }
}


public partial class SalesHistory
{
    public int SalesId { get; set; }

    public int? CustomerId { get; set; }

    public DateOnly PurchaseDate { get; set; }

    public int? BillTotal { get; set; }

    public virtual CustomerDetail? Customer { get; set; }
}





@model YourNamespace.ViewModels.OrderViewModel
@{
    ViewBag.Title = "Billing";
}

<h2>Billing</h2>

<div>
    <label for="Customer">Select Customer</label>
    @Html.DropDownList("CustomerId", (SelectList)ViewBag.Customers, "Select Customer", new { @class = "form-control", id = "CustomerId" })
</div>

<div>
    <label for="Category">Select Category</label>
    @Html.DropDownList("CategoryId", (SelectList)ViewBag.Categories, "Select Category", new { @class = "form-control", id = "CategoryId" })
</div>

<div>
    <label for="Product">Select Product</label>
    <select id="ProductId" class="form-control">
        <option value="">Select Product</option>
    </select>
</div>

<div>
    <label for="Price">Price</label>
    <input type="text" id="Price" class="form-control" readonly />
</div>

<div>
    <label for="Quantity">Quantity</label>
    <input type="number" id="Quantity" class="form-control" />
</div>

<button id="AddProduct" class="btn btn-primary">Add Product</button>

<h3>Order Details</h3>
<table id="OrderTable" class="table">
    <thead>
        <tr>
            <th>Product</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Total</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<button id="Checkout" class="btn btn-success">Checkout</button>

@section scripts {
    <script src="https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.5.1.min.js"></script>
    <script>
        $(document).ready(function() {
            $('#CategoryId').change(function() {
                var categoryId = $(this).val();
                if (categoryId) {
                    $.getJSON('@Url.Action("GetProducts")', { categoryId: categoryId }, function(data) {
                        var productDropdown = $('#ProductId');
                        productDropdown.empty();
                        productDropdown.append('<option value="">Select Product</option>');
                        $.each(data, function(index, item) {
                            productDropdown.append('<option value="' + item.ProductId + '" data-price="' + item.Price + '">' + item.ProductName + '</option>');
                        });
                    });
                }
            });

            $('#ProductId').change(function() {
                var price = $('option:selected', this).data('price');
                $('#Price').val(price);
            });

            var orderItems = [];

            $('#AddProduct').click(function() {
                var productId = $('#ProductId').val();
                var productName = $('#ProductId option:selected').text();
                var price = $('#Price').val();
                var quantity = $('#Quantity').val();
                if (productId && quantity > 0) {
                    var total = price * quantity;
                    orderItems.push({ ProductId: productId, Quantity: quantity, Price: price });
                    var newRow = '<tr><td>' + productName + '</td><td>' + price + '</td><td>' + quantity + '</td><td>' + total + '</td></tr>';
                    $('#OrderTable tbody').append(newRow);
                }
            });

            $('#Checkout').click(function() {
                var customerId = $('#CustomerId').val();
                var order = { CustomerId: customerId, OrderItems: orderItems };
                $.ajax({
                    url: '@Url.Action("Checkout")',
                    type: 'POST',
                    data: JSON.stringify(order),
                    contentType: 'application/json; charset=utf-8',
                    success: function(result) {
                        alert('Order placed successfully');
                    }
                });
            });
        });
    </script>
}





using System.Linq;
using System.Web.Mvc;
using YourNamespace.Models;  // Adjust the namespace

public class BillingController : Controller
{
    private YourDbContext db = new YourDbContext();  // Adjust to your DbContext

    // GET: Billing
    public ActionResult Index()
    {
        var categories = db.ProductCategories.ToList();
        var customers = db.CustomerDetails.ToList();
        ViewBag.Categories = new SelectList(categories, "CategoryId", "CategoryName");
        ViewBag.Customers = new SelectList(customers, "CustomerId", "CustomerName");
        return View();
    }

    // Get Products based on category
    public JsonResult GetProducts(int categoryId)
    {
        var products = db.Products.Where(p => p.CategoryId == categoryId).Select(p => new
        {
            ProductId = p.ProductId,
            ProductName = p.ProductName,
            Price = p.Price
        }).ToList();
        return Json(products, JsonRequestBehavior.AllowGet);
    }

    [HttpPost]
    public ActionResult Checkout(OrderViewModel order)
    {
        if (ModelState.IsValid)
        {
            // Save order logic here

            // For simplicity, assume an Order and OrderDetail entity
            var newOrder = new Order
            {
                CustomerId = order.CustomerId,
                OrderDate = DateTime.Now
            };
            db.Orders.Add(newOrder);
            db.SaveChanges();

            foreach (var item in order.OrderItems)
            {
                var orderDetail = new OrderDetail
                {
                    OrderId = newOrder.OrderId,
                    ProductId = item.ProductId,
                    Quantity = item.Quantity,
                    Price = item.Price
                };
                db.OrderDetails.Add(orderDetail);
            }
            db.SaveChanges();

            return RedirectToAction("Index");
        }
        return View("Index", order);
    }
}




using System.Collections.Generic;

namespace YourNamespace.ViewModels
{
    public class OrderViewModel
    {
        public int CustomerId { get; set; }
        public List<OrderItemViewModel> OrderItems { get; set; }
    }

    public class OrderItemViewModel
    {
        public int ProductId { get; set; }
        public int Quantity { get; set; }
        public int Price { get; set; }
    }
}


SELECT SUM(PricePerItem * Qty) FROM SalesItem GROUP BY SalesId HAVING SalesId = 10;
