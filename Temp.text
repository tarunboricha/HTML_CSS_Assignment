@model YourNamespace.Models.ProductViewModel

@using (Html.BeginForm())
{
    <div>
        @Html.LabelFor(m => m.SelectedCategoryId, "Select Category")
        @Html.DropDownListFor(m => m.SelectedCategoryId, 
            new SelectList(Model.Categories, "Id", "Name"), 
            "Select a category", 
            new { @class = "form-control", id = "categoryDropdown" })
    </div>

    <div>
        @Html.LabelFor(m => m.SelectedProductId, "Select Product")
        @Html.DropDownListFor(m => m.SelectedProductId, 
            new SelectList(Model.Products, "Id", "Name"), 
            "Select a product", 
            new { @class = "form-control", id = "productDropdown" })
    </div>

    <input type="submit" value="Submit" class="btn btn-primary" />
}

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#categoryDropdown').change(function () {
                var categoryId = $(this).val();
                if (categoryId) {
                    $.ajax({
                        url: '@Url.Action("GetProductsByCategory", "Product")',
                        type: 'GET',
                        data: { categoryId: categoryId },
                        success: function (data) {
                            var productDropdown = $('#productDropdown');
                            productDropdown.empty();
                            productDropdown.append('<option value="">Select a product</option>');
                            $.each(data, function (i, product) {
                                productDropdown.append($('<option></option>').val(product.Id).html(product.Name));
                            });
                        },
                        error: function (ex) {
                            alert('Failed to retrieve products: ' + ex);
                        }
                    });
                } else {
                    $('#productDropdown').empty();
                    $('#productDropdown').append('<option value="">Select a product</option>');
                }
            });
        });
    </script>
}



[HttpGet]
public async Task<ActionResult> GetProductsByCategory(int categoryId)
{
    using (var client = new HttpClient())
    {
        client.BaseAddress = new Uri("http://yourapiurl.com/");
        HttpResponseMessage response = await client.GetAsync($"api/products?categoryId={categoryId}");
        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadAsAsync<List<Product>>();
            return Json(data, JsonRequestBehavior.AllowGet);
        }
    }
    return Json(new List<Product>(), JsonRequestBehavior.AllowGet);
}




public class BillingViewModel
{
    public CustomerDetail customer {  get; set; }
    public IEnumerable<ProductCategory> categories { get; set; }
    public IEnumerable<Product> Products { get; set; }
    public IEnumerable<SupplierDetail> Suppliers { get; set; }
    public int selectedCategory { get; set; }
    public int selectedSupplier { get; set; }
    public int selectedProduct { get; set; }
    public int OrderId { get; set; }
}



public ActionResult Index(string custId, int orderId)
{
    using (HttpClient client = new HttpClient())
    { 
        BillingViewModel viewModel = new BillingViewModel();
        viewModel.OrderId = orderId;
        client.BaseAddress = new Uri("https://localhost:44338/api/");
        //HTTP GET
        var custResponseTask = client.GetAsync($"CustomerDetails/Search?customerContact={custId}");
        custResponseTask.Wait();
        // retrieve the result
        var custResult = custResponseTask.Result;
        // check the status code for success
        if (custResult.IsSuccessStatusCode)
        {
            // read the result
            var readTask = custResult.Content.ReadAsStringAsync();
            readTask.Wait();
            // fill the list variable created above with the returned result
            viewModel.customer = JsonConvert.DeserializeObject<CustomerDetail>(readTask.Result);

            var prodCatResponseTask = client.GetAsync("ProductCategory");
            prodCatResponseTask.Wait();
            // retrieve the result
            var prodCatResult = prodCatResponseTask.Result;
            // check the status code for success
            if (prodCatResult.IsSuccessStatusCode)
            {
                readTask = prodCatResult.Content.ReadAsStringAsync();
                readTask.Wait();
                // fill the list variable created above with the returned result
                viewModel.categories = JsonConvert.DeserializeObject<IEnumerable<ProductCategory>>(readTask.Result);
                ViewBag.ProductCategories = new SelectList(viewModel.categories, "CategoryId", "CategoryName");
            }
            return View(viewModel);
        }
        else //web api sent error response 
        {
            ModelState.AddModelError(string.Empty, "Server error. Please contact administrator.");
            return View(viewModel);
        }
    }
}





public ActionResult GetProductsByCategory(int categoryId)
{
    using (HttpClient client = new HttpClient())
    {
        client.BaseAddress = new Uri("https://localhost:44338/api/");
        var responseTask = client.GetAsync($"Products/GetByCategory?categoryId={categoryId}");
        responseTask.Wait();
        
        var result = responseTask.Result;
        if (result.IsSuccessStatusCode)
        {
            var readTask = result.Content.ReadAsStringAsync();
            readTask.Wait();
            var products = JsonConvert.DeserializeObject<IEnumerable<Product>>(readTask.Result);
            return Json(products, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return new HttpStatusCodeResult(HttpStatusCode.InternalServerError, "Server error. Please contact administrator.");
        }
    }
}




@model BillingViewModel

@{
    ViewBag.Title = "Billing";
}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<script type="text/javascript">
    $(document).ready(function () {
        $('#CategoryDropdown').change(function () {
            var categoryId = $(this).val();
            $.ajax({
                url: '@Url.Action("GetProductsByCategory", "YourControllerName")',
                type: 'GET',
                data: { categoryId: categoryId },
                success: function (data) {
                    var productsDropdown = $('#ProductsDropdown');
                    productsDropdown.empty();
                    $.each(data, function (i, product) {
                        productsDropdown.append($('<option/>', {
                            value: product.ProductId,
                            text: product.ProductName
                        }));
                    });
                },
                error: function (xhr, status, error) {
                    console.log(xhr.responseText);
                }
            });
        });
    });
</script>

<div>
    <h2>Billing</h2>
    <div>
        <label>Customer:</label>
        <span>@Model.customer.CustomerName</span>
    </div>
    <div>
        <label>Product Category:</label>
        @Html.DropDownList("CategoryDropdown", ViewBag.ProductCategories as SelectList, "Select Category", new { @id = "CategoryDropdown" })
    </div>
    <div>
        <label>Products:</label>
        <select id="ProductsDropdown">
            <option value="">Select Product</option>
        </select>
    </div>
</div>
