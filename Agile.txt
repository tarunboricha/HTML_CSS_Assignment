Sure, here's a simple explanation of each of the 12 principles behind the Agile Manifesto and the details for each section requested earlier.

### 12 Principles of Agile
1. **Customer satisfaction through early and continuous delivery**:
   - Deliver software frequently to satisfy customers.
   - Get feedback and make improvements quickly.

2. **Welcome changing requirements**:
   - Be open to changes, even late in the project.
   - Flexibility allows for a better product.

3. **Deliver working software frequently**:
   - Deliver small, functional pieces of software regularly (every few weeks).
   - This ensures steady progress and constant feedback.

4. **Business people and developers must work together daily**:
   - Close, daily collaboration ensures everyone is on the same page.
   - Helps quickly resolve issues and make decisions.

5. **Build projects around motivated individuals**:
   - Give team members the environment and support they need.
   - Trust them to get the job done.

6. **Face-to-face conversation**:
   - The most efficient and effective way to communicate.
   - Encourages quick feedback and collaboration.

7. **Working software is the primary measure of progress**:
   - Focus on delivering functional software.
   - More important than extensive documentation.

8. **Sustainable development**:
   - Maintain a constant pace.
   - Avoid burnout by working at a steady, manageable speed.

9. **Continuous attention to technical excellence and good design**:
   - Strive for high quality and good design.
   - Makes the product easier to maintain and extend.

10. **Simplicity**:
    - Maximize the amount of work not done.
    - Focus on the essentials.

11. **Self-organizing teams**:
    - Teams should organize themselves and make decisions.
    - Leads to more innovation and better problem-solving.

12. **Regular reflection and adjustment**:
    - Regularly review how to become more effective.
    - Make adjustments to improve continuously.

### Scrum Values
1. **Commitment**:
   - Everyone is dedicated to achieving the goals of the team.
   - Team members do their best work.

2. **Focus**:
   - Everyone focuses on the work of the Sprint.
   - Helps ensure the team completes their goals.

3. **Openness**:
   - Team members are open about their work and any challenges they face.
   - Promotes transparency and trust.

4. **Respect**:
   - Team members respect each other.
   - Encourages a positive and collaborative working environment.

5. **Courage**:
   - Team members have the courage to do the right thing.
   - They tackle difficult problems and make tough decisions.

### Scrum Pillars
1. **Transparency**:
   - All aspects of the process must be visible to those responsible for the outcome.
   - Ensures everyone has a common understanding of the work.

2. **Inspection**:
   - Regularly check progress toward a Sprint Goal.
   - Detect and correct variances early.

3. **Adaptation**:
   - Adjust processes as needed to minimize deviation.
   - Continuous improvement based on feedback.

### User Stories
User stories describe what a user needs in a simple format:
- **Format**: "As a [type of user], I want [an action] so that [a benefit]."
- **Example**: "As a shopper, I want to filter products by price so that I can find items within my budget."

### Sprint
A Sprint is a short, fixed period (2-4 weeks) during which a Scrum team works to complete specific tasks. 
- **Key Activities**: 
  - Plan work at the beginning.
  - Work on tasks during the Sprint.
  - Review work at the end.

### Velocity
Velocity measures how much work a team can complete in a Sprint.
- **How to Measure**: 
  - Add up the points for all completed user stories.
  - Use this to predict future work capacity.

### Roles in Scrum
1. **Product Owner**:
   - Manages the product backlog.
   - Prioritizes work to deliver maximum value.

2. **Scrum Master**:
   - Facilitates Scrum processes.
   - Helps the team stay focused and removes obstacles.

3. **Development Team**:
   - Does the work to create the product.
   - Cross-functional and self-organizing.

### Scrum Process
1. **Product Backlog**:
   - A list of all desired work on the project.
   - Prioritized by the Product Owner.

2. **Sprint Planning**:
   - Meeting to decide what to complete in the Sprint.
   - Team selects items from the Product Backlog.

3. **Daily Scrum**:
   - Short, daily meeting (usually 15 minutes).
   - Team members share progress, plans, and any blockers.

4. **Sprint Review**:
   - Meeting at the end of the Sprint to showcase completed work.
   - Team gets feedback from stakeholders.

5. **Sprint Retrospective**:
   - Meeting to reflect on the Sprint.
   - Discuss what went well, what didnâ€™t, and how to improve.

### INVEST Model
INVEST helps create effective user stories:
- **Independent**:
  - Stories should be self-contained.
  - Can be developed separately from others.

- **Negotiable**:
  - Stories should be flexible.
  - Details can change based on collaboration.

- **Valuable**:
  - Each story should provide value to the user or customer.

- **Estimable**:
  - Stories should be able to be estimated for effort.
  - Helps with planning and prioritization.

- **Small**:
  - Stories should be small enough to be completed in a Sprint.

- **Testable**:
  - There should be a clear way to test if the story is complete.

This detailed explanation covers all the key points about Agile and Scrum in simple language.




using OpenQA.Selenium;
using System;
using System.IO;
using iText.Kernel.Pdf;
using iText.Layout;
using iText.Layout.Element;
using iText.Layout.Properties;

public class TableToPdfConverter
{
    public static void ConvertTableToPdf(IWebElement parentTable, string outputFilePath)
    {
        try
        {
            using (PdfWriter writer = new PdfWriter(outputFilePath))
            {
                using (PdfDocument pdf = new PdfDocument(writer))
                {
                    Document document = new Document(pdf);

                    // Add title to the document
                    document.Add(new Paragraph("Table Export")
                        .SetBold()
                        .SetFontSize(16)
                        .SetTextAlignment(TextAlignment.CENTER)
                        .SetMarginBottom(20));

                    // Process the parent table
                    ProcessTable(parentTable, document, 0);

                    // Close the document
                    document.Close();
                }
            }

            Console.WriteLine($"PDF created successfully at {outputFilePath}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while creating the PDF: {ex.Message}");
        }
    }

    private static void ProcessTable(IWebElement table, Document document, int level)
    {
        // Get table headers (if any)
        var headers = table.FindElements(By.TagName("th"));

        // Count the number of columns
        int columnCount = headers.Count > 0 ? headers.Count : table.FindElements(By.TagName("tr"))[0]
            .FindElements(By.TagName("td")).Count;

        // Create a table for the PDF
        iText.Layout.Element.Table pdfTable = new iText.Layout.Element.Table(columnCount);
        pdfTable.SetMarginLeft(level * 20); // Indent nested tables

        // Add headers to the table
        foreach (var header in headers)
        {
            pdfTable.AddHeaderCell(new Cell().Add(new Paragraph(header.Text).SetBold()));
        }

        // Process rows
        foreach (var row in table.FindElements(By.TagName("tr")))
        {
            foreach (var cell in row.FindElements(By.TagName("td")))
            {
                // Check if the cell contains a nested table
                var nestedTable = cell.FindElements(By.TagName("table"));
                if (nestedTable.Count > 0)
                {
                    // Add nested table recursively
                    ProcessTable(nestedTable[0], document, level + 1);
                }
                else
                {
                    // Add cell content
                    pdfTable.AddCell(new Cell().Add(new Paragraph(cell.Text)));
                }
            }
        }

        // Add the processed table to the document
        document.Add(pdfTable);
    }
}
