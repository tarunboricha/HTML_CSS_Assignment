Your `Program.cs` setup is almost complete for implementing login functionality with role-based authorization. Here are the detailed steps to ensure roles are properly set up and to configure authentication and authorization:

### 1. Adding Role Management

First, modify your `Program.cs` to create roles on startup.

#### Step 1: Update Program.cs

```csharp
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using SportsStoreManagementSystem.CoreMVC.Data;
using SportsStoreManagementSystem.DAL.Models;
using System;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection") ?? throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(connectionString));
builder.Services.AddDatabaseDeveloperPageExceptionFilter();

builder.Services.AddDefaultIdentity<IdentityUser>(options => options.SignIn.RequireConfirmedAccount = true)
    .AddRoles<IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>();
builder.Services.AddControllersWithViews();
builder.Services.AddHttpClient();
builder.Services.AddScoped<SportsDbContext, SportsDbContext>();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseMigrationsEndPoint();
}
else
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");
app.MapRazorPages();

// Create roles and admin user on startup
using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    await CreateRoles(services);
}

app.Run();

async Task CreateRoles(IServiceProvider serviceProvider)
{
    var roleManager = serviceProvider.GetRequiredService<RoleManager<IdentityRole>>();
    var userManager = serviceProvider.GetRequiredService<UserManager<IdentityUser>>();
    string[] roleNames = { "Admin", "Clerk" };
    IdentityResult roleResult;

    foreach (var roleName in roleNames)
    {
        var roleExist = await roleManager.RoleExistsAsync(roleName);
        if (!roleExist)
        {
            roleResult = await roleManager.CreateAsync(new IdentityRole(roleName));
        }
    }

    // Here you can create a user and assign roles to them
    var adminUser = await userManager.FindByEmailAsync("admin@example.com");
    if (adminUser == null)
    {
        var newUser = new IdentityUser
        {
            UserName = "admin@example.com",
            Email = "admin@example.com"
        };
        var createUser = await userManager.CreateAsync(newUser, "Password123!");
        if (createUser.Succeeded)
        {
            await userManager.AddToRoleAsync(newUser, "Admin");
        }
    }
}
```

### 2. Protecting Routes with Roles

You can now create controllers for `Admin` and `Clerk`, ensuring that they are protected by roles.

#### Example: AdminController

```csharp
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

[Authorize(Roles = "Admin")]
public class AdminController : Controller
{
    public IActionResult Index()
    {
        return View();
    }
}
```

#### Example: ClerkController

```csharp
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

[Authorize(Roles = "Clerk")]
public class ClerkController : Controller
{
    public IActionResult Index()
    {
        return View();
    }
}
```

### 3. Handling Role-Based Access in Views

Use Razor syntax to show/hide UI elements based on roles.

#### Example: _Layout.cshtml

```html
@if (User.IsInRole("Admin"))
{
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="" asp-controller="Admin" asp-action="Index">Admin Dashboard</a>
    </li>
}

@if (User.IsInRole("Clerk"))
{
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="" asp-controller="Clerk" asp-action="Index">Clerk Dashboard</a>
    </li>
}
```

### 4. Custom Login and Access Denied Pages

#### Access Denied Page

1. **Create Access Denied View**

   Create a view at `/Views/Account/AccessDenied.cshtml`.

   ```html
   @page
   @model AccessDeniedModel

   <h1>Access Denied</h1>
   <p>You do not have permission to view this page.</p>
   ```

2. **Configure the Access Denied Path**

   Ensure the access denied path is configured in `Program.cs`:

   ```csharp
   builder.Services.ConfigureApplicationCookie(options =>
   {
       options.LoginPath = $"/Account/Login";
       options.LogoutPath = $"/Account/Logout";
       options.AccessDeniedPath = $"/Account/AccessDenied";
   });
   ```

### Conclusion

This setup ensures that your ASP.NET Core MVC application supports login functionality with role-based access control. You can now manage `Admin` and `Clerk` roles, restrict access to specific controllers and views based on these roles, and handle unauthorized access attempts gracefully.
