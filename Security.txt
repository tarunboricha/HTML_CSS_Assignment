Implementing login functionality with role-based authorization in an ASP.NET Core MVC application involves several steps. Here's a detailed guide to help you:

### 1. Setting up Roles

#### Add Role Management

First, ensure your application is set up to handle roles. You will likely need to add roles to your database.

1. **Add Roles on Application Startup**

   Modify your `Startup.cs` to ensure roles are created when the application starts.

   ```csharp
   public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
   {
       if (env.IsDevelopment())
       {
           app.UseDeveloperExceptionPage();
       }
       else
       {
           app.UseExceptionHandler("/Home/Error");
           app.UseHsts();
       }

       app.UseHttpsRedirection();
       app.UseStaticFiles();

       app.UseRouting();

       app.UseAuthentication();
       app.UseAuthorization();

       app.UseEndpoints(endpoints =>
       {
           endpoints.MapControllerRoute(
               name: "default",
               pattern: "{controller=Home}/{action=Index}/{id?}");
           endpoints.MapRazorPages();
       });

       CreateRoles(app.ApplicationServices).Wait();
   }

   private async Task CreateRoles(IServiceProvider serviceProvider)
   {
       var roleManager = serviceProvider.GetRequiredService<RoleManager<IdentityRole>>();
       var userManager = serviceProvider.GetRequiredService<UserManager<IdentityUser>>();
       string[] roleNames = { "Admin", "Clerk" };
       IdentityResult roleResult;

       foreach (var roleName in roleNames)
       {
           var roleExist = await roleManager.RoleExistsAsync(roleName);
           if (!roleExist)
           {
               roleResult = await roleManager.CreateAsync(new IdentityRole(roleName));
           }
       }

       // Here you can create a user and assign roles to them
       var adminUser = await userManager.FindByEmailAsync("admin@example.com");
       if (adminUser == null)
       {
           var newUser = new IdentityUser
           {
               UserName = "admin@example.com",
               Email = "admin@example.com"
           };
           var createUser = await userManager.CreateAsync(newUser, "Password123!");
           if (createUser.Succeeded)
           {
               await userManager.AddToRoleAsync(newUser, "Admin");
           }
       }
   }
   ```

### 2. Configuring Authentication and Authorization

#### Authentication Configuration

Ensure your `Startup.cs` is configured for authentication:

```csharp
public void ConfigureServices(IServiceCollection services)
{
    services.AddControllersWithViews();
    services.AddRazorPages();

    services.AddDbContext<ApplicationDbContext>(options =>
        options.UseSqlServer(
            Configuration.GetConnectionString("DefaultConnection")));
    services.AddDefaultIdentity<IdentityUser>(options => options.SignIn.RequireConfirmedAccount = true)
        .AddRoles<IdentityRole>()
        .AddEntityFrameworkStores<ApplicationDbContext>();

    services.Configure<IdentityOptions>(options =>
    {
        // Password settings
        options.Password.RequireDigit = true;
        options.Password.RequiredLength = 6;
        options.Password.RequireNonAlphanumeric = false;
        options.Password.RequireUppercase = true;
        options.Password.RequireLowercase = true;

        // Lockout settings
        options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);
        options.Lockout.MaxFailedAccessAttempts = 5;
        options.Lockout.AllowedForNewUsers = true;

        // User settings
        options.User.RequireUniqueEmail = true;
    });

    services.ConfigureApplicationCookie(options =>
    {
        options.LoginPath = $"/Account/Login";
        options.LogoutPath = $"/Account/Logout";
        options.AccessDeniedPath = $"/Account/AccessDenied";
    });
}

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
        app.UseDatabaseErrorPage();
    }
    else
    {
        app.UseExceptionHandler("/Home/Error");
        app.UseHsts();
    }
    app.UseHttpsRedirection();
    app.UseStaticFiles();

    app.UseRouting();

    app.UseAuthentication();
    app.UseAuthorization();

    app.UseEndpoints(endpoints =>
    {
        endpoints.MapControllerRoute(
            name: "default",
            pattern: "{controller=Home}/{action=Index}/{id?}");
        endpoints.MapRazorPages();
    });

    CreateRoles(app.ApplicationServices).Wait();
}
```

### 3. Implementing Login Functionality

Use the default account controllers and views generated by ASP.NET Core Identity. If you haven't already scaffolded them, you can do so via the command line or Visual Studio.

```bash
dotnet aspnet-codegenerator identity -dc ApplicationDbContext
```

### 4. Protecting Routes with Roles

Use the `[Authorize]` attribute to restrict access to controllers or actions based on roles.

#### Example: Admin Controller

```csharp
[Authorize(Roles = "Admin")]
public class AdminController : Controller
{
    public IActionResult Index()
    {
        return View();
    }
}
```

#### Example: Clerk Controller

```csharp
[Authorize(Roles = "Clerk")]
public class ClerkController : Controller
{
    public IActionResult Index()
    {
        return View();
    }
}
```

### 5. Handling Role-Based Access in Views

Use Razor syntax to show/hide UI elements based on roles.

```csharp
@if (User.IsInRole("Admin"))
{
    <a href="/Admin">Admin Dashboard</a>
}

@if (User.IsInRole("Clerk"))
{
    <a href="/Clerk">Clerk Dashboard</a>
}
```

### 6. Creating Custom Login and Access Denied Pages

#### Login Page

The default login page is usually sufficient, but you can customize it if needed. The page can be found in the `Account` area views (`/Areas/Identity/Pages/Account/Login.cshtml`).

#### Access Denied Page

Create an Access Denied page to handle unauthorized access attempts.

1. **Add Access Denied Page**

   Create a view at `/Views/Account/AccessDenied.cshtml`.

   ```html
   @page
   @model AccessDeniedModel

   <h1>Access Denied</h1>
   <p>You do not have permission to view this page.</p>
   ```

2. **Configure the Access Denied Path**

   Ensure the access denied path is configured in `Startup.cs`:

   ```csharp
   services.ConfigureApplicationCookie(options =>
   {
       options.AccessDeniedPath = new PathString("/Account/AccessDenied");
   });
   ```

### Conclusion

By following these steps, you will have implemented a login functionality with role-based access control in your ASP.NET Core MVC application. This setup allows for an `Admin` and `Clerk` role, each with access to their respective areas and resources.
